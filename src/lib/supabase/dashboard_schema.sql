-- Dashboard Schema Extensions
-- This file contains schema modifications for the onboarding dashboard functionality

-- 1. Add status column to projects table
ALTER TABLE public.projects 
  ADD COLUMN IF NOT EXISTS status TEXT NOT NULL DEFAULT 'brief' CHECK (status IN ('brief', 'sent', 'complete')),
  ADD COLUMN IF NOT EXISTS status_updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW();

-- Add comment for the status column
COMMENT ON COLUMN public.projects.status IS 'Current project status: brief, sent, or complete';
COMMENT ON COLUMN public.projects.status_updated_at IS 'Timestamp when status was last updated';

-- 2. Create user_profiles table for role-based access
CREATE TABLE IF NOT EXISTS public.user_profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  role TEXT NOT NULL DEFAULT 'client' CHECK (role IN ('admin', 'client')),
  first_name TEXT,
  last_name TEXT,
  company TEXT,
  phone TEXT,
  notification_preferences JSONB DEFAULT '{}'::jsonb
);

-- Add comment for the user_profiles table
COMMENT ON TABLE public.user_profiles IS 'Extended user profiles with role information';
COMMENT ON COLUMN public.user_profiles.role IS 'User role: admin or client';
COMMENT ON COLUMN public.user_profiles.notification_preferences IS 'JSON storing user notification preferences';

-- 3. Create activities table for logging actions and status changes
CREATE TABLE IF NOT EXISTS public.activities (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  project_id UUID REFERENCES public.projects(id) ON DELETE CASCADE,
  user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,
  activity_type TEXT NOT NULL CHECK (activity_type IN ('status_change', 'comment', 'document_upload', 'system_event')),
  details JSONB NOT NULL DEFAULT '{}'::jsonb,
  is_system_generated BOOLEAN DEFAULT FALSE
);

-- Add comment for the activities table
COMMENT ON TABLE public.activities IS 'Records all project activities including status changes';
COMMENT ON COLUMN public.activities.activity_type IS 'Type of activity: status_change, comment, document_upload, or system_event';
COMMENT ON COLUMN public.activities.details IS 'JSON containing activity-specific details';
COMMENT ON COLUMN public.activities.is_system_generated IS 'Whether this activity was generated by the system or a user';

-- 4. Create index for faster activity lookups
CREATE INDEX IF NOT EXISTS idx_activities_project_id ON public.activities(project_id);
CREATE INDEX IF NOT EXISTS idx_activities_user_id ON public.activities(user_id);
CREATE INDEX IF NOT EXISTS idx_activities_activity_type ON public.activities(activity_type);
CREATE INDEX IF NOT EXISTS idx_activities_created_at ON public.activities(created_at DESC);

-- 5. Enable Row Level Security on new tables
ALTER TABLE public.user_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.activities ENABLE ROW LEVEL SECURITY;

-- 6. Add RLS policies for user_profiles

-- Users can see their own profile
CREATE POLICY "Users can view their own profile" ON user_profiles
  FOR SELECT USING (auth.uid() = id);

-- Users can update their own profile
CREATE POLICY "Users can update their own profile" ON user_profiles
  FOR UPDATE USING (auth.uid() = id);

-- Admin users can see all user profiles
CREATE POLICY "Admins can view all profiles" ON user_profiles
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM user_profiles up 
      WHERE up.id = auth.uid() AND up.role = 'admin'
    )
  );

-- Admin users can update all user profiles
CREATE POLICY "Admins can update all profiles" ON user_profiles
  FOR UPDATE USING (
    EXISTS (
      SELECT 1 FROM user_profiles up 
      WHERE up.id = auth.uid() AND up.role = 'admin'
    )
  );

-- 7. Add RLS policies for activities

-- Users can see activities for their own projects
CREATE POLICY "Users can view their project activities" ON activities
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM projects p 
      WHERE p.id = activities.project_id AND p.user_id = auth.uid()
    )
  );

-- Admin users can see all activities
CREATE POLICY "Admins can view all activities" ON activities
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM user_profiles up 
      WHERE up.id = auth.uid() AND up.role = 'admin'
    )
  );

-- Users can create activities for their own projects
CREATE POLICY "Users can insert activities for their projects" ON activities
  FOR INSERT WITH CHECK (
    EXISTS (
      SELECT 1 FROM projects p 
      WHERE p.id = activities.project_id AND p.user_id = auth.uid()
    )
  );

-- Admin users can create activities for any project
CREATE POLICY "Admins can insert activities for any project" ON activities
  FOR INSERT WITH CHECK (
    EXISTS (
      SELECT 1 FROM user_profiles up 
      WHERE up.id = auth.uid() AND up.role = 'admin'
    )
  );

-- 8. Create trigger function for user registration with automatic project creation
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
DECLARE
  project_id UUID;
  user_email TEXT;
BEGIN
  -- Create a user profile with client role by default
  INSERT INTO public.user_profiles (id, role)
  VALUES (NEW.id, 'client');
  
  -- Get the user's email
  SELECT email INTO user_email FROM auth.users WHERE id = NEW.id;
  
  -- For client users, automatically create a default project
  -- Skip this for admin users who will be manually designated later
  IF EXISTS (
    SELECT 1 FROM public.user_profiles 
    WHERE id = NEW.id AND role = 'client'
  ) THEN
    -- Create a default project for the client
    INSERT INTO public.projects (
      user_id,
      client_name,
      project_description,
      status
    ) VALUES (
      NEW.id,
      COALESCE(user_email, 'New Client'),
      'Default project created on registration',
      'brief'
    )
    RETURNING id INTO project_id;
    
    -- Log the project creation in activities
    INSERT INTO public.activities (
      project_id,
      user_id,
      activity_type,
      details,
      is_system_generated
    ) VALUES (
      project_id,
      NEW.id,
      'system_event',
      jsonb_build_object(
        'event', 'project_created',
        'message', 'Project automatically created on user registration'
      ),
      TRUE
    );
  END IF;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create the trigger on auth.users
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- 9. Create trigger function for status changes
CREATE OR REPLACE FUNCTION public.handle_status_change()
RETURNS TRIGGER AS $$
BEGIN
  -- Only run this when status changes
  IF OLD.status IS DISTINCT FROM NEW.status THEN
    -- Update the status_updated_at timestamp
    NEW.status_updated_at := NOW();
    
    -- Log the status change in activities table
    INSERT INTO public.activities (
      project_id, 
      user_id, 
      activity_type, 
      details,
      is_system_generated
    ) VALUES (
      NEW.id,
      auth.uid(),
      'status_change',
      jsonb_build_object(
        'previous_status', OLD.status,
        'new_status', NEW.status
      ),
      CASE WHEN auth.uid() IS NULL THEN TRUE ELSE FALSE END
    );
  END IF;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create the trigger on projects
DROP TRIGGER IF EXISTS on_project_status_change ON public.projects;
CREATE TRIGGER on_project_status_change
  BEFORE UPDATE ON public.projects
  FOR EACH ROW EXECUTE FUNCTION public.handle_status_change();

-- 10. Grant necessary permissions
-- This is usually handled by Supabase but including for completeness
GRANT ALL ON public.user_profiles TO authenticated;
GRANT ALL ON public.activities TO authenticated; 